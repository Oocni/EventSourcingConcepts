using EventSourcingConcepts.Stores.Abstraction.Events;

namespace EventSourcingConcepts.Domain.Abstraction;

/// <summary>
/// Aggregate that will manage the execution of an action
/// </summary>
public interface IAggregate
{
    /// <summary>
    /// Determines if the aggregate can execute the action
    /// </summary>
    /// <returns>
    /// Returns true if the aggregate can execute the action, otherwise false
    /// </returns>
    bool CanExecute();

    /// <summary>
    /// Executes the action
    /// When the action is executed, the aggregate will generate events
    /// </summary>
    void Execute();
    
    /// <summary>
    /// Gets the uncommitted events generated by the aggregate
    /// </summary>
    /// <returns>
    /// Returns the uncommitted events generated by the aggregate
    /// </returns>
    IReadOnlyCollection<IEvent> GetUncommittedEvents();
}

/// <summary>
/// Aggregate that will manage the execution of an action
/// </summary>
/// <typeparam name="T">
/// Type of the parameter that will be used to execute the action
/// </typeparam>
public interface IAggregate<in T>
{
    /// <summary>
    /// Determines if the aggregate can execute the action
    /// </summary>
    /// <param name="aggregateExecuteParams">
    /// Parameter that will be used to execute the action
    /// </param>
    /// <returns>
    /// Returns true if the aggregate can execute the action, otherwise false
    /// </returns>
    bool CanExecute(T aggregateExecuteParams);
    
    /// <summary>
    /// Executes the action
    /// When the action is executed, the aggregate will generate events
    /// </summary>
    /// <param name="aggregateExecuteParams">
    /// Parameter that will be used to execute the action
    /// </param>
    void Execute(T aggregateExecuteParams);
    
    /// <summary>
    /// Gets the uncommitted events generated by the aggregate
    /// </summary>
    /// <returns>
    /// Returns the uncommitted events generated by the aggregate
    /// </returns>
    IReadOnlyCollection<IEvent> GetUncommittedEvents();
}